{"ast":null,"code":"import { codegenNativeComponent } from \"react-native-web/dist/index\";\nexport default codegenNativeComponent('RNMapsPolyline', {\n  excludedPlatforms: ['iOS']\n});","map":{"version":3,"names":["codegenNativeComponent","excludedPlatforms"],"sources":["C:/Users/other/PERSONAL PROJECTS/pharmacy-tracker/app/node_modules/react-native-maps/src/specs/NativeComponentPolyline.ts"],"sourcesContent":["import type {HostComponent, ViewProps, ColorValue} from 'react-native';\n\nimport {codegenNativeComponent} from 'react-native';\nimport type {\n  Double,\n  Float,\n  BubblingEventHandler,\n  WithDefault,\n} from 'react-native/Libraries/Types/CodegenTypes';\n\nexport type LatLng = Readonly<{\n  latitude: Double; // Non-nullable Double for latitude\n  longitude: Double; // Non-nullable Double for longitude\n}>;\n\nexport type PolylinePressEventHandler = BubblingEventHandler<\n  Readonly<{\n    action?: string;\n    id: string;\n    coordinate: {\n      latitude: Double; // Inlined LatLng\n      longitude: Double;\n    };\n    position?: {\n      x: Double; // Inlined Point\n      y: Double;\n    }; // Optional position for Android\n  }>\n>;\n\nexport interface PolylineFabricNativeProps extends ViewProps {\n  /**\n   * An array of coordinates to describe the polygon\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  coordinates: ReadonlyArray<LatLng>;\n\n  /**\n   * Boolean to indicate whether to draw each segment of the line as a geodesic as opposed to straight lines on the Mercator projection.\n   * A geodesic is the shortest path between two points on the Earth's surface.\n   * The geodesic curve is constructed assuming the Earth is a sphere.\n   *\n   * @platform iOS: Google Maps only\n   * @platform Android: Supported\n   */\n  geodesic?: boolean;\n\n  /**\n   * The line cap style to apply to the open ends of the path\n   *\n   * @default `round`\n   * @platform iOS: Apple Maps only\n   * @platform Android: supported\n   * */\n  lineCap?: WithDefault<'butt' | 'round' | 'square', 'butt'>;\n\n  /**\n   * An array of numbers specifying the dash pattern to use for the path.\n   * The array contains one or more numbers that indicate the lengths (measured in points)\n   * of the line segments and gaps in the pattern.\n   * The values in the array alternate, starting with the first line segment length,\n   * followed by the first gap length, followed by the second line segment length, and so on.\n   *\n   * @platform iOS: Apple Maps only\n   * @platform Android: supported\n   */\n  lineDashPattern?: ReadonlyArray<Double>;\n\n  /**\n   * The line join style to apply to corners of the path.\n   *\n   * @platform iOS: Apple Maps only\n   * @platform Android: supported\n   */\n  lineJoin?: WithDefault<'miter' | 'round' | 'bevel', 'miter'>;\n\n  /**\n   * Callback that is called when user taps on the map.\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  onPress?: PolylinePressEventHandler;\n\n  /**\n   * The stroke color to use for the path.\n   *\n   * @default `#000`, `rgba(r,g,b,0.5)`\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  strokeColor?: ColorValue;\n\n  /**\n   * The stroke colors to use for the path.\n   * @default `#000`, `rgba(r,g,b,0.5)`\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  strokeColors?: ReadonlyArray<ColorValue>;\n  /**\n   * The stroke width to use for the path.\n   *\n   * @default 1\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  strokeWidth?: WithDefault<Float, 1.0>;\n\n  /**\n   * Boolean to allow a polygon to be tappable and use the onPress function.\n   *\n   * @platform iOS: Google Maps only\n   * @platform Android: Supported\n   */\n  tappable?: boolean;\n}\n\nexport default codegenNativeComponent<PolylineFabricNativeProps>(\n  'RNMapsPolyline',\n  {excludedPlatforms: ['iOS']},\n) as HostComponent<PolylineFabricNativeProps>;\n"],"mappings":"SAEQA,sBAAsB;AAsH9B,eAAeA,sBAAsB,CACnC,gBAAgB,EAChB;EAACC,iBAAiB,EAAE,CAAC,KAAK;AAAC,CAC7B,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}