{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\other\\\\PERSONAL PROJECTS\\\\pharmacy-tracker\\\\app\\\\node_modules\\\\react-native-maps\\\\src\\\\MapOverlay.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport decorateMapComponent, { SUPPORTED, USES_DEFAULT_IMPLEMENTATION } from './decorateMapComponent';\nimport { fixImageProp } from './fixImageProp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction normalizeBounds(bounds) {\n  return {\n    northEast: {\n      latitude: bounds[0][0],\n      longitude: bounds[0][1]\n    },\n    southWest: {\n      latitude: bounds[1][0],\n      longitude: bounds[1][1]\n    }\n  };\n}\nexport class MapOverlay extends React.Component {\n  fabricOverlay = undefined;\n  render() {\n    const {\n      opacity = 1.0,\n      bounds\n    } = this.props;\n    if (this.fabricOverlay === undefined) {\n      this.fabricOverlay = Platform.OS === 'android';\n    }\n    const AIRMapOverlay = this.getNativeComponent();\n    let image = this.props.image;\n    let boundsParam = bounds;\n    if (this.fabricOverlay) {\n      if (this.props.image) {\n        image = fixImageProp(this.props.image);\n      }\n      if (bounds) {\n        boundsParam = normalizeBounds(bounds);\n      }\n    } else {\n      if (this.props.image) {\n        image = fixImageProp(this.props.image);\n        if (image.uri) {\n          image = image.uri;\n        }\n      }\n    }\n    return _jsxDEV(AIRMapOverlay, {\n      bounds: boundsParam,\n      opacity: opacity,\n      image: image,\n      style: [styles.overlay, this.props.style]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this);\n  }\n}\nconst styles = StyleSheet.create({\n  overlay: {\n    position: 'absolute',\n    backgroundColor: 'transparent'\n  }\n});\nMapOverlay.Animated = Animated.createAnimatedComponent(MapOverlay);\nexport default decorateMapComponent(MapOverlay, 'Overlay', {\n  google: {\n    ios: SUPPORTED,\n    android: USES_DEFAULT_IMPLEMENTATION\n  }\n});","map":{"version":3,"names":["React","StyleSheet","Animated","Platform","decorateMapComponent","SUPPORTED","USES_DEFAULT_IMPLEMENTATION","fixImageProp","jsxDEV","_jsxDEV","normalizeBounds","bounds","northEast","latitude","longitude","southWest","MapOverlay","Component","fabricOverlay","undefined","render","opacity","props","OS","AIRMapOverlay","getNativeComponent","image","boundsParam","uri","style","styles","overlay","fileName","_jsxFileName","lineNumber","columnNumber","create","position","backgroundColor","createAnimatedComponent","google","ios","android"],"sources":["C:/Users/other/PERSONAL PROJECTS/pharmacy-tracker/app/node_modules/react-native-maps/src/MapOverlay.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  Animated,\n  Platform,\n  type ViewProps,\n  type ImageURISource,\n  type ImageRequireSource,\n  type NativeSyntheticEvent,\n} from 'react-native';\n\nimport decorateMapComponent, {\n  ProviderContext,\n  SUPPORTED,\n  USES_DEFAULT_IMPLEMENTATION,\n  type MapManagerCommand,\n  type NativeComponent,\n  type UIManagerCommand,\n} from './decorateMapComponent';\nimport type {LatLng, Point} from './sharedTypes';\nimport type {Modify} from './sharedTypesInternal';\nimport {fixImageProp} from './fixImageProp';\n\nexport type MapOverlayProps = ViewProps & {\n  /**\n   * The bearing in degrees clockwise from north. Values outside the range [0, 360) will be normalized.\n   *\n   * @default 0\n   * @platform iOS: Google Maps only\n   * @platform Android: Supported\n   */\n  bearing?: number;\n\n  /**\n   * The coordinates for the image (right-top corner, left-bottom corner). ie.```[[lat, long], [lat, long]]```\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  bounds: [Coordinate, Coordinate];\n\n  /**\n   * A custom image to be used as the overlay.\n   * Only required local image resources and uri (as for images located in the net) are allowed to be used.\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  image: ImageURISource | ImageRequireSource;\n\n  /**\n   * Callback that is called when the user presses on the overlay\n   *\n   * @platform iOS: Apple Maps only\n   * @platform Android: Supported\n   */\n  onPress?: (event: OverlayPressEvent) => void;\n\n  /**\n   * The opacity of the overlay.\n   *\n   * @default 1\n   * @platform iOS: Google Maps only\n   * @platform Android: Supported\n   */\n  opacity?: number;\n\n  /**\n   * Boolean to allow an overlay to be tappable and use the onPress function.\n   *\n   * @default false\n   * @platform iOS: Not supported\n   * @platform Android: Supported\n   */\n  tappable?: boolean;\n};\n\ntype NativeProps = Modify<MapOverlayProps, {image?: string}>;\n\nfunction normalizeBounds(bounds: [number, number][]): any {\n  return {\n    northEast: {latitude: bounds[0][0], longitude: bounds[0][1]},\n    southWest: {latitude: bounds[1][0], longitude: bounds[1][1]},\n  };\n}\n\nexport class MapOverlay extends React.Component<MapOverlayProps> {\n  // declaration only, as they are set through decorateMap\n  /// @ts-ignore\n  context!: React.ContextType<typeof ProviderContext>;\n  getNativeComponent!: () => NativeComponent<NativeProps>;\n  getMapManagerCommand!: (name: string) => MapManagerCommand;\n  getUIManagerCommand!: (name: string) => UIManagerCommand;\n\n  static Animated: Animated.AnimatedComponent<typeof MapOverlay>;\n\n  private fabricOverlay?: Boolean = undefined;\n\n  render() {\n    const {opacity = 1.0, bounds} = this.props;\n\n    if (this.fabricOverlay === undefined) {\n      this.fabricOverlay = Platform.OS === 'android';\n    }\n\n    const AIRMapOverlay = this.getNativeComponent();\n    let image: any = this.props.image;\n\n    let boundsParam: any = bounds;\n    if (this.fabricOverlay) {\n      if (this.props.image) {\n        image = fixImageProp(this.props.image);\n      }\n      if (bounds) {\n        boundsParam = normalizeBounds(bounds);\n      }\n    } else {\n      if (this.props.image) {\n        image = fixImageProp(this.props.image);\n        if (image.uri) {\n          image = image.uri;\n        }\n      }\n    }\n    return (\n      <AIRMapOverlay\n        // @ts-ignore\n        bounds={boundsParam}\n        opacity={opacity}\n        // @ts-ignore\n        image={image}\n        style={[styles.overlay, this.props.style]}\n      />\n    );\n  }\n}\n\ntype Coordinate = [number, number];\n\ntype OverlayPressEvent = NativeSyntheticEvent<{\n  /**\n   * @platform iOS: Apple Maps: `image-overlay-press`\n   * @platform Android: `overlay-press`\n   */\n  action: 'overlay-press' | 'image-overlay-press';\n\n  /**\n   * @platform iOS: Apple Maps\n   */\n  name?: string;\n\n  /**\n   * @platform iOS: Apple Maps\n   * @platform Android\n   */\n  coordinate?: LatLng;\n\n  /**\n   * @platform Android\n   */\n  position?: Point;\n}>;\n\nconst styles = StyleSheet.create({\n  overlay: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n  },\n});\n\nMapOverlay.Animated = Animated.createAnimatedComponent(MapOverlay);\n\nexport default decorateMapComponent(MapOverlay, 'Overlay', {\n  google: {\n    ios: SUPPORTED,\n    android: USES_DEFAULT_IMPLEMENTATION,\n  },\n});\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,QAAA;AAW/B,OAAOC,oBAAoB,IAEzBC,SAAS,EACTC,2BAA2B,QAItB,wBAAwB;AAG/B,SAAQC,YAAY,QAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AA0D5C,SAASC,eAAeA,CAACC,MAA0B,EAAO;EACxD,OAAO;IACLC,SAAS,EAAE;MAACC,QAAQ,EAAEF,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAAEG,SAAS,EAAEH,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAAC,CAAC;IAC5DI,SAAS,EAAE;MAACF,QAAQ,EAAEF,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAAEG,SAAS,EAAEH,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAAC;EAC7D,CAAC;AACH;AAEA,OAAO,MAAMK,UAAU,SAAShB,KAAK,CAACiB,SAAS,CAAkB;EAUvDC,aAAa,GAAaC,SAAS;EAE3CC,MAAMA,CAAA,EAAG;IACP,MAAM;MAACC,OAAO,GAAG,GAAG;MAAEV;IAAM,CAAC,GAAG,IAAI,CAACW,KAAK;IAE1C,IAAI,IAAI,CAACJ,aAAa,KAAKC,SAAS,EAAE;MACpC,IAAI,CAACD,aAAa,GAAGf,QAAQ,CAACoB,EAAE,KAAK,SAAS;IAChD;IAEA,MAAMC,aAAa,GAAG,IAAI,CAACC,kBAAkB,CAAC,CAAC;IAC/C,IAAIC,KAAU,GAAG,IAAI,CAACJ,KAAK,CAACI,KAAK;IAEjC,IAAIC,WAAgB,GAAGhB,MAAM;IAC7B,IAAI,IAAI,CAACO,aAAa,EAAE;MACtB,IAAI,IAAI,CAACI,KAAK,CAACI,KAAK,EAAE;QACpBA,KAAK,GAAGnB,YAAY,CAAC,IAAI,CAACe,KAAK,CAACI,KAAK,CAAC;MACxC;MACA,IAAIf,MAAM,EAAE;QACVgB,WAAW,GAAGjB,eAAe,CAACC,MAAM,CAAC;MACvC;IACF,CAAC,MAAM;MACL,IAAI,IAAI,CAACW,KAAK,CAACI,KAAK,EAAE;QACpBA,KAAK,GAAGnB,YAAY,CAAC,IAAI,CAACe,KAAK,CAACI,KAAK,CAAC;QACtC,IAAIA,KAAK,CAACE,GAAG,EAAE;UACbF,KAAK,GAAGA,KAAK,CAACE,GAAG;QACnB;MACF;IACF;IACA,OACEnB,OAAA,CAACe,aAAa;MAEZb,MAAM,EAAEgB,WAAY;MACpBN,OAAO,EAAEA,OAAQ;MAEjBK,KAAK,EAAEA,KAAM;MACbG,KAAK,EAAE,CAACC,MAAM,CAACC,OAAO,EAAE,IAAI,CAACT,KAAK,CAACO,KAAK;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC;EAEN;AACF;AA4BA,MAAML,MAAM,GAAG7B,UAAU,CAACmC,MAAM,CAAC;EAC/BL,OAAO,EAAE;IACPM,QAAQ,EAAE,UAAU;IACpBC,eAAe,EAAE;EACnB;AACF,CAAC,CAAC;AAEFtB,UAAU,CAACd,QAAQ,GAAGA,QAAQ,CAACqC,uBAAuB,CAACvB,UAAU,CAAC;AAElE,eAAeZ,oBAAoB,CAACY,UAAU,EAAE,SAAS,EAAE;EACzDwB,MAAM,EAAE;IACNC,GAAG,EAAEpC,SAAS;IACdqC,OAAO,EAAEpC;EACX;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}