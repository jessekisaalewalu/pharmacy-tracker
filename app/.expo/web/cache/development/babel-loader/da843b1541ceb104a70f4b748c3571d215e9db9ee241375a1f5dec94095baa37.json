{"ast":null,"code":"import { codegenNativeComponent } from \"react-native-web/dist/index\";\nimport { codegenNativeCommands } from \"react-native-web/dist/index\";\nexport const Commands = codegenNativeCommands({\n  supportedCommands: ['setCoordinates', 'animateToCoordinates', 'showCallout', 'hideCallout', 'redrawCallout', 'redraw']\n});\nexport default codegenNativeComponent('RNMapsMarker', {});","map":{"version":3,"names":["codegenNativeComponent","codegenNativeCommands","Commands","supportedCommands"],"sources":["C:/Users/other/PERSONAL PROJECTS/pharmacy-tracker/app/node_modules/react-native-maps/src/specs/NativeComponentMarker.ts"],"sourcesContent":["// @ts-nocheck\nimport type {HostComponent} from 'react-native';\nimport type {\n  ViewProps,\n  ColorValue,\n  ImageSourcePropType as ImageSource,\n} from 'react-native';\n\nimport {codegenNativeComponent, codegenNativeCommands} from 'react-native';\nimport type {\n  Int32,\n  Double,\n  BubblingEventHandler,\n  DirectEventHandler,\n  WithDefault,\n} from 'react-native/Libraries/Types/CodegenTypes';\n\nexport type LatLng = Readonly<{\n  latitude: Double; // Non-nullable Double for latitude\n  longitude: Double; // Non-nullable Double for longitude\n}>;\n\nexport type MarkerPressEventHandler = BubblingEventHandler<\n  Readonly<{\n    action: string;\n    id?: string;\n    coordinate?: {\n      latitude: Double; // Inlined LatLng\n      longitude: Double;\n    };\n    position?: {\n      x: Double;\n      y: Double;\n    };\n  }>\n>;\n\nexport type MarkerDragEventHandler = DirectEventHandler<\n  Readonly<{\n    id?: string;\n    coordinate?: {\n      latitude: Double; // Inlined LatLng\n      longitude: Double;\n    };\n  }>\n>;\n\nexport type CalloutPressEventHandler = BubblingEventHandler<\n  Readonly<{\n    action: string;\n    id?: string;\n    frame?: {\n      x: Double; // Inlined LatLng\n      y: Double;\n      width: Double; // Inlined LatLng\n      height: Double;\n    };\n    point?: {\n      x: Double;\n      y: Double;\n    };\n  }>\n>;\n\ntype AppleMarkerVisibility = 'hidden' | 'adaptive' | 'visible';\n\nexport type AppleMarkerPriority = 'required' | 'high' | 'low';\n\nexport type Point = Readonly<{\n  x: Double; // Non-nullable Double for x\n  y: Double; // Non-nullable Double for y\n}>;\n\nexport interface MarkerFabricNativeProps extends ViewProps {\n  /**\n   * Sets the anchor point for the marker.\n   * The anchor specifies the point in the icon image that is anchored to the marker's position on the Earth's surface.\n   *\n   * The anchor point is specified in the continuous space [0.0, 1.0] x [0.0, 1.0],\n   * where (0, 0) is the top-left corner of the image, and (1, 1) is the bottom-right corner.\n   *\n   * The anchoring point in a W x H image is the nearest discrete grid point in a (W + 1) x (H + 1) grid, obtained by scaling the then rounding.\n   * For example, in a 4 x 2 image, the anchor point (0.7, 0.6) resolves to the grid point at (3, 1).\n   *\n   * @default {x: 0.5, y: 1.0}\n   * @platform iOS: Google Maps only. For Apple Maps, see the `centerOffset` prop\n   * @platform Android: Supported\n   */\n  anchor?: Point;\n  /**\n   * Specifies the point in the marker image at which to anchor the callout when it is displayed.\n   * This is specified in the same coordinate system as the anchor.\n   *\n   * See the `anchor` prop for more details.\n   *\n   * @default {x: 0.5, y: 0.0}\n   * @platform iOS: Google Maps only. For Apple Maps, see the `calloutOffset` prop\n   * @platform Android: Supported\n   */\n  calloutAnchor?: Point;\n\n  /**\n   * A custom image to be used as the marker's icon. Only local image resources are allowed to be used.\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  image?: ImageSource | null;\n\n  /**\n   * The offset (in points) at which to place the callout bubble.\n   * When this property is set to (0, 0),\n   * the anchor point of the callout bubble is placed on the top-center point of the marker view’s frame.\n   *\n   * Specifying positive offset values moves the callout bubble down and to the right,\n   * while specifying negative values moves it up and to the left\n   *\n   * @default {x: 0.0, y: 0.0}\n   * @platform iOS: Apple Maps only. For Google Maps, see the `calloutAnchor` prop\n   * @platform Android: Not supported. See the `calloutAnchor` prop\n   */\n  calloutOffset?: Point;\n  /**\n     Constants that indicates the display priority for annotations.\n     @default required\n     @platform iOS: Apple Maps only.\n     @platform Android: Not supported\n\n      Required: A constant indicating that the item is required.\n      High: A constant indicating that the item’s display priority is high.\n      Low: A constant indicating that the item’s display priority is Low.\n     */\n  displayPriority?: WithDefault<AppleMarkerPriority, 'required'>;\n\n  /**\n   * The offset (in points) at which to display the annotation view.\n   *\n   * By default, the center point of an annotation view is placed at the coordinate point of the associated annotation.\n   *\n   * Positive offset values move the annotation view down and to the right, while negative values move it up and to the left.\n   *\n   * @default {x: 0.0, y: 0.0}\n   * @platform iOS: Apple Maps only. For Google Maps, see the `anchor` prop\n   * @platform Android: Not supported. see the `anchor` prop\n   */\n  centerOffset?: Point;\n\n  /**\n   * The coordinate for the marker.\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  coordinate: LatLng;\n\n  /**\n   * The description of the marker.\n   *\n   * This is only used if the <Marker /> component has no children that are a `<Callout />`,\n   * in which case the default callout behavior will be used,\n   * which will show both the `title` and the `description`, if provided.\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  description?: string;\n\n  /**\n   * if `true` allows the marker to be draggable (re-positioned).\n   *\n   * @default false\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  draggable?: boolean;\n\n  /**\n   * The title of the marker.\n   * This is only used if the <Marker /> component has no `<Callout />` children.\n   *\n   * If the marker has <Callout /> children, default callout behavior will be used,\n   * which will show both the `title` and the `description`, if provided.\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  title?: string;\n\n  /**\n   * Sets whether this marker should track view changes.\n   * It's recommended to turn it off whenever it's possible to improve custom marker performance.\n   *\n   * @default true\n   * @platform iOS: Google Maps only\n   * @platform Android: Supported\n   */\n  tracksViewChanges?: WithDefault<boolean, true>;\n\n  /**\n   * A string that can be used to identify this marker.\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  identifier?: string;\n\n  /**\n   * When true, the marker will be pre-selected.\n   * Setting this to true allows the user to drag the marker without needing to tap on it first to focus it.\n   *\n   * @default false\n   * @platform iOS: Apple Maps only\n   * @platform Android: Not supported\n   */\n  isPreselected?: boolean;\n\n  /**\n   * Callback that is called when the user taps the callout view.\n   *\n   * @platform iOS: Apple Maps only\n   * @platform Android: Supported\n   */\n  onCalloutPress?: CalloutPressEventHandler;\n\n  /**\n   * Callback that is called when the marker is deselected, before the callout is hidden.\n   *\n   * @platform iOS: Apple Maps only\n   * @platform Android: supported\n   */\n  onDeselect?: MarkerPressEventHandler;\n\n  /**\n   * Callback called continuously as the marker is dragged\n   *\n   * @platform iOS: Apple Maps only\n   * @platform Android: Supported\n   */\n  onDrag?: MarkerDragEventHandler;\n\n  /**\n   * Callback that is called when a drag on the marker finishes.\n   * This is usually the point you will want to setState on the marker's coordinate again\n   *\n   * @platform iOS: Apple Maps only\n   * @platform Android: Supported\n   */\n  onDragEnd?: MarkerDragEventHandler;\n\n  /**\n   * Callback that is called when the user initiates a drag on the marker (if it is draggable)\n   *\n   * @platform iOS: Apple Maps only\n   * @platform Android: Supported\n   */\n  onDragStart?: MarkerDragEventHandler;\n\n  /**\n   * Callback that is called when the marker is tapped by the user.\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  onPress?: MarkerPressEventHandler;\n\n  /**\n   * Callback that is called when the marker becomes selected.\n   * This will be called when the callout for that marker is about to be shown.\n   *\n   * @platform iOS: Supported.\n   * @platform Android: Supported\n   */\n  onSelect?: MarkerPressEventHandler;\n\n  /**\n   * The marker's opacity between 0.0 and 1.0.\n   *\n   * @default 1.0\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  opacity?: WithDefault<Double, 1.0>;\n\n  /**\n   * If no custom marker view or custom image is provided, the platform default pin will be used, which can be customized by this color.\n   * Ignored if a custom marker is being used.<br/><br/>\n   * For Android, the set of available colors is limited. Unsupported colors will fall back to red.\n   * See [#887](https://github.com/react-community/react-native-maps/issues/887) for more information.\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  pinColor?: ColorValue;\n\n  /**\n   * Visibility of the title text rendered beneath Marker balloon\n   * @platform iOS: Apple Maps only\n   * @platform Android: Not supported\n   */\n  titleVisibility?: WithDefault<AppleMarkerVisibility, 'visible'>;\n\n  /**\n   * Visibility of the subtitle text rendered beneath Marker balloon\n   * @platform iOS: Apple Maps only\n   * @platform Android: Not supported\n   */\n  subtitleVisibility?: WithDefault<AppleMarkerVisibility, 'adaptive'>;\n\n  /**\n   * Indicate type of default markers if it's true MKPinAnnotationView will be used and MKMarkerAnnotationView if it's false\n   * It doesn't change anything if you are using custom Markers\n   * @platform iOS: Apple Maps only\n   * @platform Android: Not supported\n   */\n  useLegacyPinView?: boolean;\n}\nexport interface NativeCommands {\n  animateToCoordinates: (\n    viewRef: React.ElementRef<React.ComponentType>,\n    latitude: Double,\n    longitude: Double,\n    duration: Int32,\n  ) => void;\n  setCoordinates: (\n    viewRef: React.ElementRef<React.ComponentType>,\n    latitude: Double,\n    longitude: Double,\n  ) => void;\n  showCallout: (viewRef: React.ElementRef<React.ComponentType>) => void;\n  hideCallout: (viewRef: React.ElementRef<React.ComponentType>) => void;\n  redrawCallout: (viewRef: React.ElementRef<React.ComponentType>) => void;\n  redraw: (viewRef: React.ElementRef<React.ComponentType>) => void;\n}\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: [\n    'setCoordinates',\n    'animateToCoordinates',\n    'showCallout',\n    'hideCallout',\n    'redrawCallout',\n    'redraw',\n  ],\n});\n\nexport default codegenNativeComponent<MarkerFabricNativeProps>(\n  'RNMapsMarker',\n  {},\n) as HostComponent<MarkerFabricNativeProps>;\n"],"mappings":"SAQQA,sBAAsB;AAAA,SAAEC,qBAAqB;AAsUrD,OAAO,MAAMC,QAAwB,GAAGD,qBAAqB,CAAiB;EAC5EE,iBAAiB,EAAE,CACjB,gBAAgB,EAChB,sBAAsB,EACtB,aAAa,EACb,aAAa,EACb,eAAe,EACf,QAAQ;AAEZ,CAAC,CAAC;AAEF,eAAeH,sBAAsB,CACnC,cAAc,EACd,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}