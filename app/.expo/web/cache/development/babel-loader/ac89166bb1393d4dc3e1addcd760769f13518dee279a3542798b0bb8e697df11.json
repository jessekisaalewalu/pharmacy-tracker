{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\other\\\\PERSONAL PROJECTS\\\\pharmacy-tracker\\\\app\\\\node_modules\\\\react-native-maps\\\\src\\\\MapUrlTile.tsx\";\nimport * as React from 'react';\nimport decorateMapComponent, { USES_DEFAULT_IMPLEMENTATION, SUPPORTED } from './decorateMapComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class MapUrlTile extends React.Component {\n  render() {\n    const AIRMapUrlTile = this.getNativeComponent();\n    return _jsxDEV(AIRMapUrlTile, Object.assign({}, this.props), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport default decorateMapComponent(MapUrlTile, 'UrlTile', {\n  google: {\n    ios: SUPPORTED,\n    android: USES_DEFAULT_IMPLEMENTATION\n  }\n});","map":{"version":3,"names":["React","decorateMapComponent","USES_DEFAULT_IMPLEMENTATION","SUPPORTED","jsxDEV","_jsxDEV","MapUrlTile","Component","render","AIRMapUrlTile","getNativeComponent","Object","assign","props","fileName","_jsxFileName","lineNumber","columnNumber","google","ios","android"],"sources":["C:/Users/other/PERSONAL PROJECTS/pharmacy-tracker/app/node_modules/react-native-maps/src/MapUrlTile.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport decorateMapComponent, {\n  USES_DEFAULT_IMPLEMENTATION,\n  SUPPORTED,\n  ProviderContext,\n  type NativeComponent,\n  type MapManagerCommand,\n  type UIManagerCommand,\n} from './decorateMapComponent';\nimport type {ViewProps} from 'react-native';\n\nexport type MapUrlTileProps = ViewProps & {\n  /**\n   * Doubles tile size from 256 to 512 utilising higher zoom levels\n   * i.e loading 4 higher zoom level tiles and combining them for one high-resolution tile.\n   * iOS does this automatically, even if it is not desirable always.\n   * NB! using this makes text labels smaller than in the original map style.\n   *\n   * @platform iOS: Not supported\n   * @platform Android: Supported\n   */\n  doubleTileSize?: boolean;\n\n  /**\n   * Allow tiles using the TMS coordinate system (origin bottom left) to be used,\n   * and displayed at their correct coordinates.\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  flipY?: boolean;\n\n  /**\n   * The maximum native zoom level for this tile overlay i.e. the highest zoom level that the tile server provides.\n   * Tiles are auto-scaled for higher zoom levels.\n   *\n   * @platform iOS: Apple Maps only\n   * @platform Android: Supported\n   */\n  maximumNativeZ?: number;\n\n  /**\n   * The maximum zoom level for this tile overlay.\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  maximumZ?: number;\n\n  /**\n   * The minimum zoom level for this tile overlay.\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  minimumZ?: number;\n\n  /**\n   * In offline-mode tiles are not fetched from the tile servers, rather only tiles stored in the cache directory are used.\n   * Furthermore automated tile scaling is activated: if tile at a desired zoom level is not found from the cache directory,\n   * then lower zoom level tile is used (up to 4 levels lower) and scaled.\n   *\n   * @default false\n   * @platform iOS: Apple Maps only\n   * @platform Android: Supported\n   */\n  offlineMode?: boolean;\n\n  /**\n   * Map layer opacity. Value between 0 - 1, with 0 meaning fully transparent.\n   *\n   * @platform iOS: Apple Maps only\n   * @platform Android: Supported\n   */\n  opacity?: number;\n\n  /**\n   * Corresponds to MKTileOverlay canReplaceMapContent i.e. if true then underlying iOS basemap is not shown.\n   *\n   * @default false\n   * @platform iOS: Apple Maps only\n   * @platform Android: Not supported\n   */\n  shouldReplaceMapContent?: boolean;\n\n  /**\n   * Defines maximum age in seconds for a cached tile before it's refreshed.\n   *\n   * NB! Refresh logic is \"serve-stale-while-refresh\"\n   * i.e. to ensure map availability a stale (over max age) tile is served\n   * while a tile refresh process is started in the background.\n   *\n   * @platform iOS: Apple Maps only\n   * @platform Android: Supported\n   */\n  tileCacheMaxAge?: number;\n\n  /**\n   * Enable caching of tiles in the specified directory.\n   * Directory can be specified either as a normal path or in URL format (`file://`).\n   *\n   * Tiles are stored in tileCachePath directory as `/{z}/{x}/{y}` i.e. in sub-directories 2-levels deep,\n   * filename is tile y-coordinate without any filetype-extension.\n   *\n   * NB! All cache management needs to be implemented by client e.g. deleting tiles to manage use of storage space etc.\n   *\n   * @platform iOS: Apple Maps only\n   * @platform Android: Supported\n   */\n  tileCachePath?: string;\n\n  /**\n   * Tile size, default size is 256 (for tiles of 256 _ 256 pixels).\n   * High-res (aka 'retina') tiles are 512 (tiles of 512 _ 512 pixels)\n   *\n   * @platform iOS: Apple Maps only\n   * @platform Android: Supported\n   */\n  tileSize?: number;\n\n  /**\n   * The url template of the map tileserver.\n   * (URLTile) The patterns {x} {y} {z} will be replaced at runtime.\n   * For example, http://c.tile.openstreetmap.org/{z}/{x}/{y}.png.\n   *\n   * It is also possible to refer to tiles in local filesystem with file:///top-level-directory/sub-directory/{z}/{x}/{y}.png URL-format.\n   * (WMSTile) The patterns {minX} {maxX} {minY} {maxY} {width} {height} will be replaced at runtime according to EPSG:900913 specification bounding box.\n   * For example, https://demo.geo-solutions.it/geoserver/tiger/wms?service=WMS&version=1.1.0&request=GetMap&layers=tiger:poi&styles=&bbox={minX},{minY},{maxX},{maxY}&width={width}&height={height}&srs=EPSG:900913&format=image/png&transparent=true&format_options=dpi:213.\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n\n  urlTemplate: string;\n\n  /**\n   * The order in which this tile overlay is drawn with respect to other overlays.\n   * An overlay with a larger z-index is drawn over overlays with smaller z-indices.\n   * The order of overlays with the same z-index is arbitrary.\n   *\n   * @platform iOS: Google Maps only\n   * @platform Android: Supported\n   */\n  zIndex?: number;\n};\n\ntype NativeProps = MapUrlTileProps;\n\nexport class MapUrlTile extends React.Component<MapUrlTileProps> {\n  // declaration only, as they are set through decorateMap\n  /// @ts-ignore\n  context!: React.ContextType<typeof ProviderContext>;\n  getNativeComponent!: () => NativeComponent<NativeProps>;\n  getMapManagerCommand!: (name: string) => MapManagerCommand;\n  getUIManagerCommand!: (name: string) => UIManagerCommand;\n\n  render() {\n    const AIRMapUrlTile = this.getNativeComponent();\n    return <AIRMapUrlTile {...this.props} />;\n  }\n}\n\nexport default decorateMapComponent(MapUrlTile, 'UrlTile', {\n  google: {\n    ios: SUPPORTED,\n    android: USES_DEFAULT_IMPLEMENTATION,\n  },\n});\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAOC,oBAAoB,IACzBC,2BAA2B,EAC3BC,SAAS,QAKJ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AA4IhC,OAAO,MAAMC,UAAU,SAASN,KAAK,CAACO,SAAS,CAAkB;EAQ/DC,MAAMA,CAAA,EAAG;IACP,MAAMC,aAAa,GAAG,IAAI,CAACC,kBAAkB,CAAC,CAAC;IAC/C,OAAOL,OAAA,CAACI,aAAa,EAAAE,MAAA,CAAAC,MAAA,KAAK,IAAI,CAACC,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC1C;AACF;AAEA,eAAehB,oBAAoB,CAACK,UAAU,EAAE,SAAS,EAAE;EACzDY,MAAM,EAAE;IACNC,GAAG,EAAEhB,SAAS;IACdiB,OAAO,EAAElB;EACX;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}