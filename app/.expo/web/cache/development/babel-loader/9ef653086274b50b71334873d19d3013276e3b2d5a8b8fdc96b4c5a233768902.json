{"ast":null,"code":"import { codegenNativeComponent } from \"react-native-web/dist/index\";\nexport default codegenNativeComponent('RNMapsWMSTile', {\n  excludedPlatforms: ['iOS']\n});","map":{"version":3,"names":["codegenNativeComponent","excludedPlatforms"],"sources":["C:/Users/other/PERSONAL PROJECTS/pharmacy-tracker/app/node_modules/react-native-maps/src/specs/NativeComponentWMSTile.ts"],"sourcesContent":["import type {HostComponent, ViewProps} from 'react-native';\n\nimport {codegenNativeComponent} from 'react-native';\nimport type {\n  Int32,\n  WithDefault,\n} from 'react-native/Libraries/Types/CodegenTypes';\n\nexport interface WMSTileFabricNativeProps extends ViewProps {\n  /**\n   * The maximum native zoom level for this tile overlay i.e. the highest zoom level that the tile server provides.\n   * Tiles are auto-scaled for higher zoom levels.\n   *\n   * @platform iOS: Apple Maps only\n   * @platform Android: Supported\n   */\n  maximumNativeZ?: WithDefault<Int32, 100>;\n\n  /**\n   * The maximum zoom level for this tile overlay.\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  maximumZ?: WithDefault<Int32, 100>;\n\n  /**\n   * The minimum zoom level for this tile overlay.\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  minimumZ?: Int32;\n\n  /**\n   * In offline-mode tiles are not fetched from the tile servers, rather only tiles stored in the cache directory are used.\n   * Furthermore, automated tile scaling is activated: if tile at a desired zoom level is not found from the cache directory,\n   * then lower zoom level tile is used (up to 4 levels lower) and scaled.\n   *\n   * @default false\n   * @platform iOS: Apple Maps only\n   * @platform Android: Supported\n   */\n  offlineMode?: boolean;\n\n  /**\n   * Corresponds to MKTileOverlay canReplaceMapContent i.e. if true then underlying iOS basemap is not shown.\n   *\n   * @default false\n   * @platform iOS: Apple Maps only\n   * @platform Android: Not supported\n   */\n  shouldReplaceMapContent?: boolean;\n\n  /**\n   * Defines maximum age in seconds for a cached tile before it's refreshed.\n   *\n   * NB! Refresh logic is \"serve-stale-while-refresh\"\n   * i.e. to ensure map availability a stale (over max age) tile is served\n   * while a tile refresh process is started in the background.\n   *\n   * @platform iOS: Apple Maps only\n   * @platform Android: Supported\n   */\n  tileCacheMaxAge?: Int32;\n\n  /**\n   * Enable caching of tiles in the specified directory.\n   * Directory can be specified either as a normal path or in URL format (`file://`).\n   *\n   * Tiles are stored in tileCachePath directory as `/{z}/{x}/{y}` i.e. in sub-directories 2-levels deep,\n   * filename is tile y-coordinate without any filetype-extension.\n   *\n   * NB! All cache management needs to be implemented by client e.g. deleting tiles to manage use of storage space etc.\n   *\n   * @platform iOS: Apple Maps only\n   * @platform Android: Supported\n   */\n  tileCachePath?: string;\n\n  /**\n   * Tile size, default size is 256 (for tiles of 256 _ 256 pixels).\n   * High-res (aka 'retina') tiles are 512 (tiles of 512 _ 512 pixels)\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  tileSize?: WithDefault<Int32, 256>;\n\n  /**\n   * The url template of the map tileserver.\n   * (URLTile) The patterns {x} {y} {z} will be replaced at runtime.\n   * For example, http://c.tile.openstreetmap.org/{z}/{x}/{y}.png.\n   *\n   * It is also possible to refer to tiles in local filesystem with file:///top-level-directory/sub-directory/{z}/{x}/{y}.png URL-format.\n   * (WMSTile) The patterns {minX} {maxX} {minY} {maxY} {width} {height} will be replaced at runtime according to EPSG:900913 specification bounding box.\n   * For example, https://demo.geo-solutions.it/geoserver/tiger/wms?service=WMS&version=1.1.0&request=GetMap&layers=tiger:poi&styles=&bbox={minX},{minY},{maxX},{maxY}&width={width}&height={height}&srs=EPSG:900913&format=image/png&transparent=true&format_options=dpi:213.\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  urlTemplate: string;\n}\n\nexport default codegenNativeComponent<WMSTileFabricNativeProps>(\n  'RNMapsWMSTile',\n  {\n    excludedPlatforms: ['iOS'],\n  },\n) as HostComponent<WMSTileFabricNativeProps>;\n"],"mappings":"SAEQA,sBAAsB;AAsG9B,eAAeA,sBAAsB,CACnC,eAAe,EACf;EACEC,iBAAiB,EAAE,CAAC,KAAK;AAC3B,CACF,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}