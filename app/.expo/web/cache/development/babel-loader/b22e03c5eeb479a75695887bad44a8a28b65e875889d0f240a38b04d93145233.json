{"ast":null,"code":"import { createContext } from 'react';\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport { PROVIDER_DEFAULT, PROVIDER_GOOGLE } from './ProviderConstants';\nimport GooglePolygon from './specs/NativeComponentGooglePolygon';\nimport FabricMarker from './specs/NativeComponentMarker';\nimport FabricUrlTile from './specs/NativeComponentUrlTile';\nimport FabricWMSTile from './specs/NativeComponentWMSTile';\nimport FabricCallout from './specs/NativeComponentCallout';\nimport FabricPolyline from './specs/NativeComponentPolyline';\nimport FabricCircle from './specs/NativeComponentCircle';\nimport FabricOverlay from './specs/NativeComponentOverlay';\nexport const SUPPORTED = 'SUPPORTED';\nexport const USES_DEFAULT_IMPLEMENTATION = 'USES_DEFAULT_IMPLEMENTATION';\nexport const NOT_SUPPORTED = 'NOT_SUPPORTED';\nexport const ProviderContext = createContext(undefined);\nexport function getNativeMapName(provider) {\n  if (Platform.OS === 'android') {\n    return 'AIRMap';\n  }\n  if (provider === PROVIDER_GOOGLE) {\n    return 'AIRGoogleMap';\n  }\n  return 'AIRMap';\n}\nfunction getNativeComponentName(provider, component) {\n  return `${getNativeMapName(provider)}${component}`;\n}\nexport const createNotSupportedComponent = message => {\n  return () => {\n    console.error(message);\n    return null;\n  };\n};\nexport const googleMapIsInstalled = !!UIManager.hasViewManagerConfig(getNativeMapName(PROVIDER_GOOGLE));\nexport default function decorateMapComponent(Component, componentName, providers) {\n  const components = {};\n  const getDefaultComponent = () => requireNativeComponent(getNativeComponentName(undefined, componentName));\n  Component.contextType = ProviderContext;\n  Component.prototype.getNativeComponent = function getNativeComponent() {\n    const provider = this.context;\n    if (componentName === 'Marker' && (Platform.OS !== 'ios' || provider !== PROVIDER_GOOGLE)) {\n      return FabricMarker;\n    }\n    if (componentName === 'Polygon' && (provider === PROVIDER_GOOGLE && Platform.OS === 'ios' && googleMapIsInstalled || Platform.OS === 'android')) {\n      return GooglePolygon;\n    }\n    if (Platform.OS === 'android') {\n      if (componentName === 'Callout') {\n        return FabricCallout;\n      } else if (componentName === 'Polyline') {\n        return FabricPolyline;\n      } else if (componentName === 'Circle') {\n        return FabricCircle;\n      } else if (componentName === 'Overlay') {\n        return FabricOverlay;\n      } else if (componentName === 'UrlTile') {\n        return FabricUrlTile;\n      } else if (componentName === 'WMSTile') {\n        return FabricWMSTile;\n      }\n    }\n    const key = provider || 'default';\n    if (components[key]) {\n      return components[key];\n    }\n    if (provider === PROVIDER_DEFAULT) {\n      components[key] = getDefaultComponent();\n      return components[key];\n    }\n    if (!provider) {\n      throw new Error('react-native-maps: provider is not set');\n    }\n    const providerInfo = providers[provider];\n    if (Platform.OS !== 'android' && Platform.OS !== 'ios') {\n      throw new Error(`react-native-maps doesn't support ${Platform.OS}`);\n    }\n    const platformSupport = providerInfo[Platform.OS];\n    const nativeComponentName = getNativeComponentName(provider, componentName);\n    if (platformSupport === NOT_SUPPORTED) {\n      components[key] = createNotSupportedComponent(`react-native-maps: ${nativeComponentName} is not supported on ${Platform.OS}`);\n    } else if (platformSupport === SUPPORTED) {\n      if (provider !== PROVIDER_GOOGLE || Platform.OS === 'ios' && googleMapIsInstalled) {\n        components[key] = requireNativeComponent(nativeComponentName);\n      }\n    } else {\n      if (!components.default) {\n        components.default = getDefaultComponent();\n      }\n      components[key] = components.default;\n    }\n    return components[key];\n  };\n  Component.prototype.getUIManagerCommand = function getUIManagerCommand(name) {\n    const nativeComponentName = getNativeComponentName(this.context, componentName);\n    return UIManager.getViewManagerConfig(nativeComponentName).Commands[name];\n  };\n  Component.prototype.getMapManagerCommand = function getMapManagerCommand(name) {\n    const nativeComponentName = `${getNativeComponentName(this.context, componentName)}Manager`;\n    return NativeModules[nativeComponentName][name];\n  };\n  return Component;\n}","map":{"version":3,"names":["createContext","requireNativeComponent","NativeModules","Platform","UIManager","PROVIDER_DEFAULT","PROVIDER_GOOGLE","GooglePolygon","FabricMarker","FabricUrlTile","FabricWMSTile","FabricCallout","FabricPolyline","FabricCircle","FabricOverlay","SUPPORTED","USES_DEFAULT_IMPLEMENTATION","NOT_SUPPORTED","ProviderContext","undefined","getNativeMapName","provider","OS","getNativeComponentName","component","createNotSupportedComponent","message","console","error","googleMapIsInstalled","hasViewManagerConfig","decorateMapComponent","Component","componentName","providers","components","getDefaultComponent","contextType","prototype","getNativeComponent","context","key","Error","providerInfo","platformSupport","nativeComponentName","default","getUIManagerCommand","name","getViewManagerConfig","Commands","getMapManagerCommand"],"sources":["C:/Users/other/PERSONAL PROJECTS/pharmacy-tracker/app/node_modules/react-native-maps/src/decorateMapComponent.ts"],"sourcesContent":["import {createContext} from 'react';\nimport {\n  requireNativeComponent,\n  NativeModules,\n  Platform,\n  UIManager,\n  type HostComponent,\n} from 'react-native';\nimport {PROVIDER_DEFAULT, PROVIDER_GOOGLE} from './ProviderConstants';\nimport type {Provider} from './sharedTypes';\nimport {MapCallout} from './MapCallout';\nimport {MapOverlay} from './MapOverlay';\nimport {MapCalloutSubview} from './MapCalloutSubview';\nimport {MapCircle} from './MapCircle';\nimport {MapHeatmap} from './MapHeatmap';\nimport {MapLocalTile} from './MapLocalTile';\nimport {MapMarker} from './MapMarker';\nimport {MapPolygon} from './MapPolygon';\nimport {MapPolyline} from './MapPolyline';\nimport {MapUrlTile} from './MapUrlTile';\nimport {MapWMSTile} from './MapWMSTile';\nimport {Commands} from './MapViewNativeComponent';\nimport GooglePolygon from './specs/NativeComponentGooglePolygon';\nimport FabricMarker from './specs/NativeComponentMarker';\nimport FabricUrlTile from './specs/NativeComponentUrlTile';\nimport FabricWMSTile from './specs/NativeComponentWMSTile';\nimport FabricCallout from './specs/NativeComponentCallout';\nimport FabricPolyline from './specs/NativeComponentPolyline';\nimport FabricCircle from './specs/NativeComponentCircle';\nimport FabricOverlay from './specs/NativeComponentOverlay';\n\nexport const SUPPORTED: ImplementationStatus = 'SUPPORTED';\nexport const USES_DEFAULT_IMPLEMENTATION: ImplementationStatus =\n  'USES_DEFAULT_IMPLEMENTATION';\nexport const NOT_SUPPORTED: ImplementationStatus = 'NOT_SUPPORTED';\n\nexport const ProviderContext = createContext<Provider>(undefined);\n\nexport function getNativeMapName(provider: Provider) {\n  if (Platform.OS === 'android') {\n    return 'AIRMap';\n  }\n  if (provider === PROVIDER_GOOGLE) {\n    return 'AIRGoogleMap';\n  }\n  return 'AIRMap';\n}\n\nfunction getNativeComponentName(provider: Provider, component: ComponentName) {\n  return `${getNativeMapName(provider)}${component}`;\n}\n\nexport const createNotSupportedComponent = (message: string): (() => null) => {\n  return () => {\n    console.error(message);\n    return null;\n  };\n};\n\nexport const googleMapIsInstalled = !!UIManager.hasViewManagerConfig(\n  getNativeMapName(PROVIDER_GOOGLE),\n);\n\nexport default function decorateMapComponent<Type extends Component>(\n  Component: Type,\n  componentName: ComponentName,\n  providers: Providers,\n): Type {\n  const components: {\n    [key: string]: NativeComponent;\n  } = {};\n\n  const getDefaultComponent = () =>\n    requireNativeComponent(getNativeComponentName(undefined, componentName));\n\n  // @ts-ignore\n  Component.contextType = ProviderContext;\n\n  Component.prototype.getNativeComponent =\n    function getNativeComponent(): NativeComponent {\n      const provider = this.context;\n      if (\n        componentName === 'Marker' &&\n        (Platform.OS !== 'ios' || provider !== PROVIDER_GOOGLE)\n      ) {\n        // @ts-ignore\n        return FabricMarker;\n      }\n      if (\n        componentName === 'Polygon' &&\n        ((provider === PROVIDER_GOOGLE &&\n          Platform.OS === 'ios' &&\n          googleMapIsInstalled) ||\n          Platform.OS === 'android')\n      ) {\n        // @ts-ignore\n        return GooglePolygon;\n      }\n      if (Platform.OS === 'android') {\n        if (componentName === 'Callout') {\n          // @ts-ignore\n          return FabricCallout;\n        } else if (componentName === 'Polyline') {\n          // @ts-ignore\n          return FabricPolyline;\n        } else if (componentName === 'Circle') {\n          // @ts-ignore\n          return FabricCircle;\n        } else if (componentName === 'Overlay') {\n          // @ts-ignore\n          return FabricOverlay;\n        } else if (componentName === 'UrlTile') {\n          // @ts-ignore\n          return FabricUrlTile;\n        } else if (componentName === 'WMSTile') {\n          // @ts-ignore\n          return FabricWMSTile;\n        }\n      }\n      const key = provider || 'default';\n      if (components[key]) {\n        return components[key];\n      }\n\n      if (provider === PROVIDER_DEFAULT) {\n        components[key] = getDefaultComponent();\n        return components[key];\n      }\n\n      if (!provider) {\n        throw new Error('react-native-maps: provider is not set');\n      }\n\n      // @ts-ignore\n      const providerInfo = providers[provider];\n\n      // quick fix. Previous code assumed android | ios\n      if (Platform.OS !== 'android' && Platform.OS !== 'ios') {\n        throw new Error(`react-native-maps doesn't support ${Platform.OS}`);\n      }\n\n      const platformSupport = providerInfo[Platform.OS];\n      const nativeComponentName = getNativeComponentName(\n        provider,\n        componentName,\n      );\n      if (platformSupport === NOT_SUPPORTED) {\n        components[key] = createNotSupportedComponent(\n          `react-native-maps: ${nativeComponentName} is not supported on ${Platform.OS}`,\n        );\n      } else if (platformSupport === SUPPORTED) {\n        if (\n          provider !== PROVIDER_GOOGLE ||\n          (Platform.OS === 'ios' && googleMapIsInstalled)\n        ) {\n          components[key] = requireNativeComponent(nativeComponentName);\n        }\n      } else {\n        // (platformSupport === USES_DEFAULT_IMPLEMENTATION)\n        if (!components.default) {\n          components.default = getDefaultComponent();\n        }\n        components[key] = components.default;\n      }\n\n      return components[key];\n    };\n\n  Component.prototype.getUIManagerCommand = function getUIManagerCommand(\n    name: string,\n  ): UIManagerCommand {\n    const nativeComponentName = getNativeComponentName(\n      this.context,\n      componentName,\n    );\n    return UIManager.getViewManagerConfig(nativeComponentName).Commands[name];\n  };\n\n  Component.prototype.getMapManagerCommand = function getMapManagerCommand(\n    name: string,\n  ): MapManagerCommand {\n    const nativeComponentName = `${getNativeComponentName(\n      this.context,\n      componentName,\n    )}Manager`;\n    return NativeModules[nativeComponentName][name];\n  };\n\n  return Component;\n}\n\ntype ImplementationStatus =\n  | 'SUPPORTED'\n  | 'USES_DEFAULT_IMPLEMENTATION'\n  | 'NOT_SUPPORTED';\n\ntype Providers = {\n  google: {\n    ios: ImplementationStatus;\n    android: ImplementationStatus;\n  };\n};\n\nexport type UIManagerCommand = number;\n\nexport type MapManagerCommand = keyof typeof Commands;\n\nexport type NativeComponent<H = unknown> =\n  | HostComponent<H>\n  | ReturnType<typeof createNotSupportedComponent>;\n\ntype Component =\n  | typeof MapCallout\n  | typeof MapCalloutSubview\n  | typeof MapCircle\n  | typeof MapHeatmap\n  | typeof MapLocalTile\n  | typeof MapMarker\n  | typeof MapOverlay\n  | typeof MapPolygon\n  | typeof MapPolyline\n  | typeof MapUrlTile\n  | typeof MapWMSTile;\n\ntype ComponentName =\n  | 'Callout'\n  | 'CalloutSubview'\n  | 'Circle'\n  | 'Heatmap'\n  | 'LocalTile'\n  | 'Marker'\n  | 'Overlay'\n  | 'Polygon'\n  | 'Polyline'\n  | 'UrlTile'\n  | 'WMSTile';\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}