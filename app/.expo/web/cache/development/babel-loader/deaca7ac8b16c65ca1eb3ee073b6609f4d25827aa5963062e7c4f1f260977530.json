{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\other\\\\PERSONAL PROJECTS\\\\pharmacy-tracker\\\\app\\\\node_modules\\\\react-native-maps\\\\src\\\\MapPolyline.tsx\";\nimport * as React from 'react';\nimport decorateMapComponent, { USES_DEFAULT_IMPLEMENTATION, SUPPORTED } from './decorateMapComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class MapPolyline extends React.Component {\n  constructor(props) {\n    super(props);\n    this.polyline = React.createRef();\n  }\n  setNativeProps(props) {\n    this.polyline.current?.setNativeProps(props);\n  }\n  render() {\n    const {\n      strokeColor = '#000',\n      strokeWidth = 1,\n      lineJoin = 'round',\n      lineCap = 'round'\n    } = this.props;\n    const AIRMapPolyline = this.getNativeComponent();\n    return _jsxDEV(AIRMapPolyline, Object.assign({}, this.props, {\n      strokeColor: strokeColor,\n      strokeWidth: strokeWidth,\n      lineJoin: lineJoin,\n      lineCap: lineCap,\n      ref: this.polyline\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default decorateMapComponent(MapPolyline, 'Polyline', {\n  google: {\n    ios: SUPPORTED,\n    android: USES_DEFAULT_IMPLEMENTATION\n  }\n});","map":{"version":3,"names":["React","decorateMapComponent","USES_DEFAULT_IMPLEMENTATION","SUPPORTED","jsxDEV","_jsxDEV","MapPolyline","Component","constructor","props","polyline","createRef","setNativeProps","current","render","strokeColor","strokeWidth","lineJoin","lineCap","AIRMapPolyline","getNativeComponent","Object","assign","ref","fileName","_jsxFileName","lineNumber","columnNumber","google","ios","android"],"sources":["C:/Users/other/PERSONAL PROJECTS/pharmacy-tracker/app/node_modules/react-native-maps/src/MapPolyline.tsx"],"sourcesContent":["import * as React from 'react';\nimport {View, type NativeSyntheticEvent, type ViewProps} from 'react-native';\nimport decorateMapComponent, {\n  USES_DEFAULT_IMPLEMENTATION,\n  SUPPORTED,\n  ProviderContext,\n  type NativeComponent,\n  type MapManagerCommand,\n  type UIManagerCommand,\n} from './decorateMapComponent';\nimport type {LatLng, LineCapType, LineJoinType, Point} from './sharedTypes';\n\nexport type MapPolylineProps = ViewProps & {\n  /**\n   * An array of coordinates to describe the polyline\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  coordinates: LatLng[];\n\n  /**\n   * The fill color to use for the path.\n   *\n   * @default `#000`, `rgba(r,g,b,0.5)`\n   * @platform iOS: Apple Maps only\n   * @platform Android: Not supported\n   */\n  fillColor?: string;\n\n  /**\n   * Boolean to indicate whether to draw each segment of the line as a geodesic as opposed to straight lines on the Mercator projection.\n   * A geodesic is the shortest path between two points on the Earth's surface.\n   * The geodesic curve is constructed assuming the Earth is a sphere.\n   *\n   * @platform iOS: Google Maps only\n   * @platform Android: Supported\n   */\n  geodesic?: boolean;\n\n  /**\n   * The line cap style to apply to the open ends of the path\n   *\n   * @default `round`\n   * @platform iOS: Apple Maps only\n   * @platform Android: supported\n   * */\n  lineCap?: LineCapType;\n\n  /**\n   * An array of numbers specifying the dash pattern to use for the path.\n   * The array contains one or more numbers that indicate the lengths (measured in points)\n   * of the line segments and gaps in the pattern.\n   * The values in the array alternate, starting with the first line segment length,\n   * followed by the first gap length, followed by the second line segment length, and so on.\n   *\n   * @platform iOS: Apple Maps only\n   * @platform Android: supported\n   */\n  lineDashPattern?: number[];\n\n  /**\n   * The offset (in points) at which to start drawing the dash pattern.\n   * Use this property to start drawing a dashed line partway through a segment or gap.\n   * For example, a phase value of 6 for the patter 5-2-3-2 would cause drawing to begin in the middle of the first gap.\n   *\n   * @default 0\n   * @platform iOS: Apple Maps only\n   * @platform Android: Not supported\n   */\n  lineDashPhase?: number;\n\n  /**\n   * The line join style to apply to corners of the path.\n   *\n   * @platform iOS: Apple Maps only\n   * @platform Android: supported\n   */\n  lineJoin?: LineJoinType;\n\n  /**\n   * The limiting value that helps avoid spikes at junctions between connected line segments.\n   * The miter limit helps you avoid spikes in paths that use the `miter` `lineJoin` style.\n   * If the ratio of the miter length—that is, the diagonal length of the miter join—to the line thickness exceeds the miter limit,\n   * the joint is converted to a bevel join.\n   * The default miter limit is 10, which results in the conversion of miters whose angle at the joint is less than 11 degrees.\n   *\n   * @default 10\n   * @platform iOS: Apple Maps only\n   * @platform Android: Not supported\n   */\n  miterLimit?: number;\n\n  /**\n   * Callback that is called when the user presses on the polyline\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  onPress?: (event: PolylinePressEvent) => void;\n\n  /**\n   * The stroke color to use for the path.\n   *\n   * @default `#000`, `rgba(r,g,b,0.5)`\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  strokeColor?: string;\n\n  /**\n   * The stroke colors to use for the path.\n   *\n   * Must be the same length as `coordinates`\n   *\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  strokeColors?: string[];\n\n  /**\n   * The stroke width to use for the path.\n   *\n   * @default 1\n   * @platform iOS: Supported\n   * @platform Android: Supported\n   */\n  strokeWidth?: number;\n\n  /**\n   * Boolean to allow the polyline to be tappable and use the onPress function.\n   *\n   * @platform iOS: Google Maps only\n   * @platform Android: Supported\n   */\n  tappable?: boolean;\n\n  /**\n   * The order in which this tile overlay is drawn with respect to other overlays.\n   * An overlay with a larger z-index is drawn over overlays with smaller z-indices.\n   * The order of overlays with the same z-index is arbitrary.\n   *\n   * @platform iOS: Google Maps only\n   * @platform Android: Supported\n   */\n  zIndex?: number;\n};\n\ntype NativeProps = MapPolylineProps & {ref: React.RefObject<View | null>};\n\nexport class MapPolyline extends React.Component<MapPolylineProps> {\n  // declaration only, as they are set through decorateMap\n  /// @ts-ignore\n  context!: React.ContextType<typeof ProviderContext>;\n  getNativeComponent!: () => NativeComponent<NativeProps>;\n  getMapManagerCommand!: (name: string) => MapManagerCommand;\n  getUIManagerCommand!: (name: string) => UIManagerCommand;\n\n  private polyline: NativeProps['ref'];\n\n  constructor(props: MapPolylineProps) {\n    super(props);\n    this.polyline = React.createRef<View>();\n  }\n\n  setNativeProps(props: Partial<NativeProps>) {\n    this.polyline.current?.setNativeProps(props);\n  }\n\n  render() {\n    const {\n      strokeColor = '#000',\n      strokeWidth = 1,\n      lineJoin = 'round',\n      lineCap = 'round',\n    } = this.props;\n    const AIRMapPolyline = this.getNativeComponent();\n    return (\n      <AIRMapPolyline\n        {...this.props}\n        strokeColor={strokeColor}\n        strokeWidth={strokeWidth}\n        lineJoin={lineJoin}\n        lineCap={lineCap}\n        ref={this.polyline}\n      />\n    );\n  }\n}\n\nexport default decorateMapComponent(MapPolyline, 'Polyline', {\n  google: {\n    ios: SUPPORTED,\n    android: USES_DEFAULT_IMPLEMENTATION,\n  },\n});\n\nexport type PolylinePressEvent = NativeSyntheticEvent<{\n  action: 'polyline-press';\n\n  /**\n   * @platform iOS: Google Maps\n   */\n  id?: string;\n\n  /**\n   * @platform Android\n   */\n  coordinate?: LatLng;\n\n  /**\n   * @platform Android\n   */\n  position?: Point;\n}>;\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAOC,oBAAoB,IACzBC,2BAA2B,EAC3BC,SAAS,QAKJ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AA6IhC,OAAO,MAAMC,WAAW,SAASN,KAAK,CAACO,SAAS,CAAmB;EAUjEC,WAAWA,CAACC,KAAuB,EAAE;IACnC,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,QAAQ,GAAGV,KAAK,CAACW,SAAS,CAAO,CAAC;EACzC;EAEAC,cAAcA,CAACH,KAA2B,EAAE;IAC1C,IAAI,CAACC,QAAQ,CAACG,OAAO,EAAED,cAAc,CAACH,KAAK,CAAC;EAC9C;EAEAK,MAAMA,CAAA,EAAG;IACP,MAAM;MACJC,WAAW,GAAG,MAAM;MACpBC,WAAW,GAAG,CAAC;MACfC,QAAQ,GAAG,OAAO;MAClBC,OAAO,GAAG;IACZ,CAAC,GAAG,IAAI,CAACT,KAAK;IACd,MAAMU,cAAc,GAAG,IAAI,CAACC,kBAAkB,CAAC,CAAC;IAChD,OACEf,OAAA,CAACc,cAAc,EAAAE,MAAA,CAAAC,MAAA,KACT,IAAI,CAACb,KAAK;MACdM,WAAW,EAAEA,WAAY;MACzBC,WAAW,EAAEA,WAAY;MACzBC,QAAQ,EAAEA,QAAS;MACnBC,OAAO,EAAEA,OAAQ;MACjBK,GAAG,EAAE,IAAI,CAACb;IAAS;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC;EAEN;AACF;AAEA,eAAe1B,oBAAoB,CAACK,WAAW,EAAE,UAAU,EAAE;EAC3DsB,MAAM,EAAE;IACNC,GAAG,EAAE1B,SAAS;IACd2B,OAAO,EAAE5B;EACX;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}