{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/other/PERSONAL PROJECTS/pharmacy-tracker/app/node_modules/react-native-maps/src/MapView.types.ts"],"sourcesContent":["import type {ClickEvent, LatLng, Point, Region} from './sharedTypes';\nimport type {NativeSyntheticEvent} from 'react-native';\n\n// All types in this file are directly exported with the package for external\n// use.\n\nexport type Camera = {\n  /**\n   * Apple Maps\n   */\n  altitude?: number;\n  center: LatLng;\n  heading: number;\n  pitch: number;\n\n  /**\n   * Google Maps\n   */\n  zoom?: number;\n};\n\nexport type MapStyleElement = {\n  featureType?: string;\n  elementType?: string;\n  stylers: object[];\n};\n\nexport type EdgePadding = {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n};\n\nexport type MapType =\n  | 'hybrid'\n  | 'mutedStandard'\n  | 'none'\n  | 'satellite'\n  | 'standard'\n  | 'terrain'\n  | 'satelliteFlyover'\n  | 'hybridFlyover';\n\nexport type MapTypes = {\n  STANDARD: 'standard';\n  SATELLITE: 'satellite';\n  HYBRID: 'hybrid';\n  TERRAIN: 'terrain';\n  NONE: 'none';\n  MUTEDSTANDARD: 'mutedStandard';\n  SATELLITE_FLYOVER: 'satelliteFlyover';\n  HYBRID_FLYOVER: 'hybridFlyover';\n};\n\nexport type IndoorLevel = {\n  index: number;\n  name: string;\n  shortName: string;\n};\n\nexport type ActiveIndoorLevel = {\n  activeLevelIndex: number;\n  name: string;\n  shortName: string;\n};\n\nexport type IndoorLevelActivatedEvent = NativeSyntheticEvent<{\n  indoorLevel: ActiveIndoorLevel;\n}>;\n\nexport type IndoorBuilding = {\n  underground: boolean;\n  activeLevelIndex: number;\n  levels: IndoorLevel[];\n};\n\nexport type IndoorBuildingEvent = NativeSyntheticEvent<{\n  IndoorBuilding: IndoorBuilding;\n}>;\n\nexport type KmlMarker = {\n  id: string;\n  title: string;\n  description: string;\n  coordinate: LatLng;\n  position: Point;\n};\n\nexport type KmlMapEvent = NativeSyntheticEvent<{markers: KmlMarker[]}>;\n\nexport type LongPressEvent = ClickEvent<{\n  /**\n   * @platform Android\n   */\n  action?: 'long-press';\n}>;\n\nexport type PanDragEvent = ClickEvent;\n\nexport type PoiClickEvent = NativeSyntheticEvent<{\n  placeId: string;\n  name: string;\n  coordinate: LatLng;\n\n  /**\n   * @platform Android\n   */\n  position?: Point;\n}>;\n\nexport type MapPressEvent = ClickEvent<{\n  /**\n   * @platform Android\n   */\n  action?: 'press' | 'marker-press';\n}>;\n\nexport type Details = {\n  isGesture?: boolean;\n};\n\nexport type UserLocationChangeEvent = NativeSyntheticEvent<{\n  coordinate?: LatLng & {\n    altitude: number;\n    timestamp: number;\n    accuracy: number;\n    speed: number;\n    heading: number;\n\n    /**\n     * @platform iOS\n     */\n    altitudeAccuracy?: number;\n\n    /**\n     * @platform Android\n     */\n    isFromMockProvider?: boolean;\n  };\n\n  /**\n   * @platform iOS\n   */\n  error?: {\n    message: string;\n  };\n}>;\n\nexport type ChangeEvent = NativeSyntheticEvent<{\n  region: Region;\n  isGesture?: boolean;\n}>;\n\nexport type FitToOptions = {\n  edgePadding?: EdgePadding;\n  animated?: boolean;\n};\n\nexport type BoundingBox = {northEast: LatLng; southWest: LatLng};\n\nexport type SnapshotOptions = {\n  /** optional, when omitted the view-width is used */\n  width?: number;\n  /** optional, when omitted the view-height is used */\n  height?: number;\n  /** __iOS only__, optional region to render */\n  region?: Region;\n  /** image formats, defaults to 'png' */\n  format?: 'png' | 'jpg';\n  /** image quality: 0..1 (only relevant for jpg, default: 1) */\n  quality?: number;\n  /** result types, defaults to 'file' */\n  result?: 'file' | 'base64';\n};\n\nexport type Address = {\n  administrativeArea: string;\n  country: string;\n  countryCode: string;\n  locality: string;\n  name: string;\n  postalCode: string;\n  subAdministrativeArea: string;\n  subLocality: string;\n  thoroughfare: string;\n  subThoroughfare?: string;\n};\n\nexport type CameraZoomRange = {\n  minCenterCoordinateDistance?: number;\n  maxCenterCoordinateDistance?: number;\n  animated?: boolean;\n};\n\nexport type NativeCommandName =\n  | 'animateCamera'\n  | 'animateToRegion'\n  | 'coordinateForPoint'\n  | 'fitToCoordinates'\n  | 'fitToElements'\n  | 'fitToSuppliedMarkers'\n  | 'getAddressFromCoordinates'\n  | 'getCamera'\n  | 'getMapBoundaries'\n  | 'getMarkersFrames'\n  | 'pointForCoordinate'\n  | 'setCamera'\n  | 'setIndoorActiveLevelIndex'\n  | 'setMapBoundaries'\n  | 'takeSnapshot';\n"],"mappings":"","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}